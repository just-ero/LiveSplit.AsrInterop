using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

using LiveSplit.AsrInterop.SourceGenerators.Metadata.SettingsGenerator;

using Microsoft.CodeAnalysis;

namespace LiveSplit.AsrInterop.SourceGenerators;

[Generator(LanguageNames.CSharp)]
internal sealed class SettingsGenerator : IncrementalGenerator<SettingsGenerator.SettingsTypeInfo>
{
    protected override string AttributeMetadataName { get; } = "LiveSplit.AsrInterop.SourceGenerators.Core.SettingsAttribute";

    protected override bool Include(SyntaxNode node, CancellationToken ct)
    {
        return true;
    }

    protected override SettingsTypeInfo Transform(GeneratorAttributeSyntaxContext context, CancellationToken ct)
    {
        return new((INamedTypeSymbol)context.TargetSymbol);
    }

    protected override IEnumerable<(string FileName, string Code)> GetSourceOutput(SourceProductionContext context, SettingsTypeInfo info)
    {
        StringBuilder registrationCode = new();

        foreach (var (method, args) in info.Settings.SelectMany(s => s.RegistrationInstructions))
        {
            var arguments = string.Join(", ", args.Select(a => $"{a.Name}: {a.Value}"));
            registrationCode.AppendLine($"LiveSplit.AsrInterop.Core.UserSettings.{method}({arguments});");
            registrationCode.Append("            ");
        }

        string code = $$"""
            // <auto-generated />

            namespace {{info.Namespace}} {
                partial class {{info.ClassName}} : LiveSplit.AsrInterop.SourceGenerators.Core.ISettings {
                    public void RegisterSettings() {
                        {{registrationCode}}
                    }
                }
            }
            """;

        return [
            ($"{info.FullName}.g.cs", code)
        ];
    }

    public sealed class SettingsTypeInfo(INamedTypeSymbol symbol)
    {
        public string ClassName { get; } = symbol.Name;
        public string? Namespace { get; } = symbol.ContainingNamespace.IsGlobalNamespace
            ? null
            : symbol.ContainingNamespace.ToString();

        public string FullName => Namespace is null
            ? ClassName
            : $"{Namespace}.{ClassName}";

        public bool ImplementsRegisterSettings
        {
            get
            {
                return symbol.FindImplementationForInterfaceMember(
                    symbol.ContainingAssembly.GetTypeByMetadataName("LiveSplit.AsrInterop.SourceGenerators.Core.ISettings")!
                        .GetMembers("RegisterSettings").First()) is not null;
            }
        }

        public IEnumerable<IRegisterSetting> Settings
        {
            get
            {
                foreach (var property in symbol.GetMembers().OfType<IPropertySymbol>())
                {
                    foreach (var attribute in property.GetAttributes())
                    {
                        yield return attribute.AttributeClass?.ToString() switch
                        {
                            Names.SettingsGenerator.HeadingAttribute => new HeadingInfo(attribute),
                            Names.SettingsGenerator.H1Attribute => new HeadingInfo(attribute, 0),
                            Names.SettingsGenerator.H2Attribute => new HeadingInfo(attribute, 1),
                            Names.SettingsGenerator.H3Attribute => new HeadingInfo(attribute, 2),
                            Names.SettingsGenerator.H4Attribute => new HeadingInfo(attribute, 3),
                            Names.SettingsGenerator.H5Attribute => new HeadingInfo(attribute, 4),
                            Names.SettingsGenerator.H6Attribute => new HeadingInfo(attribute, 5),

                            Names.SettingsGenerator.ToggleAttribute => new ToggleInfo(attribute, property),

                            Names.SettingsGenerator.ChoiceAttribute => new ChoiceInfo(attribute, property),
                            Names.SettingsGenerator.ChoiceAttribute_1 => new ChoiceInfo(attribute, property),

                            Names.SettingsGenerator.FileSelectAttribute => new FileSelectInfo(attribute, property),
                            _ => null!
                        };
                    }
                }
            }
        }
    }
}
