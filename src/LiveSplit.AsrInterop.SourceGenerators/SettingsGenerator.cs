using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

using LiveSplit.AsrInterop.SourceGenerators.Metadata.SettingsGenerator;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace LiveSplit.AsrInterop.SourceGenerators;

[Generator(LanguageNames.CSharp)]
internal sealed class SettingsGenerator : IIncrementalGenerator
{
    private const string AttributeMetadataName = "LiveSplit.AsrInterop.SourceGenerators.Core.SettingsAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var data = context.SyntaxProvider
            .ForAttributeWithMetadataName(AttributeMetadataName, Include, Transform);

        context.RegisterSourceOutput(data, Generate);
    }

    private static bool Include(SyntaxNode node, CancellationToken ct)
    {
        return true;
    }

    private static SettingsTypeInfo Transform(GeneratorAttributeSyntaxContext context, CancellationToken ct)
    {
        return new((INamedTypeSymbol)context.TargetSymbol);
    }

    private static void Generate(SourceProductionContext context, SettingsTypeInfo data)
    {
        StringBuilder registrationCode = new();

        foreach (var (method, @params) in data.Settings.SelectMany(s => s.RegisterCode))
        {
            registrationCode.Append("LiveSplit.AsrInterop.Core.UserSettings.")
                .Append(method)
                .Append("(");

            string sep = "";
            foreach (var (name, value) in @params)
            {
                registrationCode.Append(sep)
                    .Append(name)
                    .Append(": ")
                    .Append(value is string ? $"\"{value}\"" : value);

                sep = ", ";
            }

            var arguments = string.Join(", ", @params.Select(a => $"{a.Name}: {a.Value}"));
            registrationCode.AppendLine($"LiveSplit.AsrInterop.Core.UserSettings.{method}({arguments});");
            registrationCode.Append("            ");
        }

        string code = $$"""
            // <auto-generated />

            namespace {{data.Namespace}} {
                partial class {{data.ClassName}} : LiveSplit.AsrInterop.SourceGenerators.Core.ISettings {
                    public void RegisterSettings() {
                        {{registrationCode}}
                    }
                }
            }
            """;

        context.AddSource($"{data.FullName}.g.cs", SourceText.From(code, Encoding.UTF8, SourceHashAlgorithm.Sha256));
    }

    public sealed class SettingsTypeInfo(INamedTypeSymbol symbol)
    {
        public string ClassName { get; } = symbol.Name;
        public string? Namespace { get; } = symbol.ContainingNamespace.IsGlobalNamespace
            ? null
            : symbol.ContainingNamespace.ToString();

        public string FullName => Namespace is null
            ? ClassName
            : $"{Namespace}.{ClassName}";

        public IEnumerable<ISettingInfo> Settings
        {
            get
            {
                foreach (var property in symbol.GetMembers().OfType<IPropertySymbol>())
                {
                    foreach (var attribute in property.GetAttributes())
                    {
                        yield return attribute.AttributeClass?.ToString() switch
                        {
                            Names.SettingsGenerator.HeadingAttribute => new HeadingInfo(attribute),
                            Names.SettingsGenerator.H1Attribute => new HeadingInfo(attribute, 0),
                            Names.SettingsGenerator.H2Attribute => new HeadingInfo(attribute, 1),
                            Names.SettingsGenerator.H3Attribute => new HeadingInfo(attribute, 2),
                            Names.SettingsGenerator.H4Attribute => new HeadingInfo(attribute, 3),
                            Names.SettingsGenerator.H5Attribute => new HeadingInfo(attribute, 4),
                            Names.SettingsGenerator.H6Attribute => new HeadingInfo(attribute, 5),

                            Names.SettingsGenerator.ToggleAttribute => new ToggleInfo(attribute, property),

                            Names.SettingsGenerator.ChoiceAttribute_1 => new ChoiceInfo(attribute, property),

                            Names.SettingsGenerator.TooltipAttribute => new TooltipInfo(attribute),

                            _ => null!
                        };
                    }
                }
            }
        }

        private static ISettingInfo? GetInfo()
    }
}
