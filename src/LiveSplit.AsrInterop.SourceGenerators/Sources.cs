namespace LiveSplit.AsrInterop.SourceGenerators;

public static class Sources
{
    public const string AutosplitterExports = $$"""
        // <auto-generated />

        #nullable enable

        file class AutosplitterExports {
            public static LiveSplit.AsrInterop.Autosplitter Splitter { get; } = new {{Tokens.TypeFullName}}();
            public static LiveSplit.AsrInterop.ExternalProcess? Game { get; set; }

            static AutosplitterExports() {
                Splitter.Settings.RegisterSettings();
                Splitter.Startup();
            }

            [global::System.Diagnostics.StackTraceHiddenAttribute]
            [global::System.Runtime.InteropServices.UnmanagedCallersOnly(EntryPoint = "update")]
            private static void UpdateInternal() {
                Splitter.Settings.Map = LiveSplit.AsrInterop.Core.SettingsMap.Load();

                if (Game is null) {
                    foreach (string processName in Splitter.ProcessNames) {
                        LiveSplit.AsrInterop.Core.Process game = LiveSplit.AsrInterop.Core.Process.GetProcessByName(processName);

                        if (!game.IsValid) {
                            continue;
                        }

                        Game = new(game);

                        if (!Splitter.Init(Game)) {
                            Game.Dispose();
                            Game = null;
                        }

                        break;
                    }

                    if (Game is null) {
                        return;
                    }
                }

                if (Game.HasExited) {
                    Game.Dispose();
                    Game = null;

                    Splitter.Exit();

                    return;
                }

                if (!Splitter.Update(Game)) {
                    return;
                }

                switch (LiveSplit.AsrInterop.Core.Timer.GetState()) {
                    case LiveSplit.AsrInterop.Core.TimerState.NotRunning:
                        if (Splitter.Start(Game)) {
                            LiveSplit.AsrInterop.Core.Timer.Start();
                            goto case LiveSplit.AsrInterop.Core.TimerState.Running;
                        }
                        break;

                    case LiveSplit.AsrInterop.Core.TimerState.Running:
                    case LiveSplit.AsrInterop.Core.TimerState.Paused:
                        if (Splitter.IsLoading(Game)) {
                            LiveSplit.AsrInterop.Core.Timer.PauseGameTime();
                        }
                        else {
                            LiveSplit.AsrInterop.Core.Timer.ResumeGameTime();
                        }

                        if (Splitter.GameTime(Game) is global::System.TimeSpan gameTime) {
                            LiveSplit.AsrInterop.Core.Timer.SetGameTime(gameTime.Seconds, gameTime.Nanoseconds);
                        }

                        if (Splitter.Reset(Game)) {
                            LiveSplit.AsrInterop.Core.Timer.Reset();
                        }
                        else if (Splitter.Split(Game)) {
                            LiveSplit.AsrInterop.Core.Timer.Split();
                        }
                        break;
                }
            }
        }
        """;
}
